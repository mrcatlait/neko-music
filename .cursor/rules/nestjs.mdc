---
description: 
globs: apps/server/**/*.{ts,sql}
---
You are an expert software architect tasked with creating comprehensive rules for Cursor AI to follow when working with Neko Music. 

# Cursor AI Rules for Neko Music

## Project Overview
Neko Music is a full-featured music streaming platform designed to offer a smooth experience for discovering, playing, and curating music. The platform combines sophisticated audio technology with an intuitive user interface to deliver high-quality music streaming across multiple devices.

## Project Context
This document defines the rules and guidelines for Cursor AI when working with Neko Music.

### Technical Stack
- Platform: web
- Framework: NestJS with Fastify (not Express)
- Key Dependencies:
  - swagger-nest
  - terminus
  - postgres (postgres.js)
  - fastify
  - cookie-fastify
  - class-validator
  - class-transformer
  - config-nest

## Code Generation Rules

### 1. Project Structure
Follow these directory and file organization rules:
- Maintain the established project structure
- Place components in appropriate directories
- Follow file naming conventions
- Respect module boundaries
- Keep related files together

### 2. Dependency Injection Guidelines
- Use constructor-based dependency injection
- Implement custom providers when needed
- Use proper injection scopes (DEFAULT, REQUEST, TRANSIENT)
- Utilize custom injection tokens when appropriate
- Follow circular dependency best practices

### 3. Database Handling
- Use `postgres` library for database operations
  - Utilize tagged template literals for safe query construction
  - Implement proper connection pooling
  - Use proper parameter binding
  - Handle transactions correctly
  - Implement proper error handling

#### Database Best Practices
- Structure SQL queries:
  ```sql
  const users = await sql`
    SELECT 
      u.id,
      u.name,
      u.email
    FROM users u
    WHERE u.active = true
    ORDER BY u.created_at DESC
  `
  ```
- Use Common Table Expressions (CTEs) for complex queries:
  ```sql
  const result = await sql`
    WITH recent_users AS (
      SELECT * FROM users
      WHERE created_at > NOW() - INTERVAL '7 days'
    )
    SELECT * FROM recent_users
    WHERE active = true
  `
  ```
- Implement proper transactions:
  ```sql
  const [user, account] = await sql.begin(async sql => {
    const [user] = await sql`
      INSERT INTO users (name, email)
      VALUES (${name}, ${email})
      RETURNING *
    `
    const [account] = await sql`
      INSERT INTO accounts (user_id)
      VALUES (${user.id})
      RETURNING *
    `
    return [user, account]
  })
  ```

#### Database Migration Strategy
- Use `postgres-shift` or similar tools for migrations
- Structure migrations:
  ```sql
  -- migrations/001_initial.sql
  CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
  );

  CREATE INDEX users_email_idx ON users (email);
  ```
- Version control migrations
- Implement rollback strategies
- Handle data migrations
- Test migrations before deployment

#### Performance Optimization
- Implement proper indexing
- Use connection pooling effectively
- Optimize query patterns
- Use proper batch operations:
  ```typescript
  // Batch insert example
  const users = [
    { name: 'John', email: 'john@example.com' },
    { name: 'Jane', email: 'jane@example.com' }
  ]
  
  await sql`
    INSERT INTO users ${sql(users, 'name', 'email')}
  `
  ```

### 4. API Design
- Use proper HTTP methods (GET, POST, PUT, PATCH, DELETE)
- Implement proper response codes
- Use DTOs for request/response validation
- Implement proper pagination
- Use proper query parameters
- Handle file uploads correctly
- Implement proper API versioning
- Use proper content negotiation

### 5. Authentication & Authorization
- Use proper guards
- Implement role-based access control
- Implement proper session management
- Use proper password hashing
- Implement session-based authentication
  - Use secure session cookies
  - Implement proper session storage
  - Handle session expiration
  - Implement CSRF protection
- Session Management:
  ```typescript
  // Session configuration
  app.register(fastifyCookie, {
    secret: config.COOKIE_SECRET,
    hook: 'onRequest',
    parseOptions: {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      path: '/'
    }
  })

  // Session validation
  app.addHook('preHandler', async (request, reply) => {
    const sessionId = request.cookies.sessionId
    if (!sessionId) {
      throw new UnauthorizedException()
    }
    // Validate session
  })
  ```

### 6. Query Organization
- Structure queries by domain/feature
- Use proper naming conventions
- Implement query helpers:
  ```typescript
  // queries/users.ts
  export const userQueries = {
    findById: (sql) => async (id: number) => {
      const [user] = await sql`
        SELECT * FROM users WHERE id = ${id}
      `
      return user
    },
    
    create: (sql) => async (data: NewUser) => {
      const [user] = await sql`
        INSERT INTO users ${sql(data, 'name', 'email')}
        RETURNING *
      `
      return user
    }
  }
  ```

### 7. Error Handling
- Use built-in HTTP exceptions
- Implement custom exceptions when needed
- Use exception filters
- Handle async errors properly
- Implement proper logging
- Use proper error codes
- Handle validation errors

### 8. Performance Optimization
- Use proper caching strategies
  - Response caching
  - In-memory caching
  - Distributed caching
- Implement proper database indexing
- Use proper N+1 query prevention
- Implement proper connection pooling
- Use proper streaming for large datasets
- Implement proper rate limiting

### 9. Testing Strategy
- Unit testing
  - Use proper mocking
  - Test individual components
  - Use proper test doubles
- Integration testing
  - Test module integration
  - Test database integration
  - Test external service integration
- E2E testing
  - Test complete flows
  - Test API endpoints
  - Test authentication flows

### 10. Logging and Monitoring (New Section)
- Implement proper logging levels
- Use proper logging format
- Implement proper monitoring
- Use proper health checks
- Implement proper metrics
- Use proper tracing
- Handle proper debugging

### 11. Documentation Requirements (Enhanced)
- Use OpenAPI (Swagger) decorators
- Implement proper JSDoc comments
- Document API endpoints
- Document DTOs
- Document entities
- Generate API documentation
- Maintain changelog

### 12. Documentation
Generate documentation that:
- Is clear and concise
- Includes JSDoc comments
- Provides usage examples
- Documents edge cases
- Explains complex logic
- Includes type information
- Follows documentation standards

## Best Practices

### 1. Code Organization
- Use feature modules
- Implement proper separation of concerns
- Use proper file naming conventions
- Implement proper module boundaries
- Use proper dependency management

### 2. Configuration Management
- Use environment variables
- Implement proper configuration validation
- Use proper configuration namespaces
- Handle sensitive configuration
- Implement proper configuration inheritance

### 3. Performance
- Optimize bundle size
- Implement code splitting
- Use proper caching
- Optimize rendering
- Follow lazy loading patterns

### 4. Security
- Validate user input
- Sanitize data output
- Use proper authentication
- Protect sensitive data
- Follow security best practices
