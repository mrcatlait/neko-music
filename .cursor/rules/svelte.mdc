---
description: 
globs: 
alwaysApply: true
---
<rule>
name: svelte_sveltekit_development
description: Rules and standards for Svelte 5 and SvelteKit development with TypeScript
filters:
  - type: file_extension
    pattern: "\\.(svelte|ts|js|tsx|jsx)$"
  - type: directory
    pattern: "(src|routes|lib)"
  - type: content
    pattern: "(<script|\\$state|\\$derived|\\$effect|\\$props)"
actions:
  - type: suggest
    message: |
      Svelte 5 & SvelteKit Development Rules:

      1. Architecture First:
         - ALWAYS follow hierarchical domain-based feature structure
         - Use proper import restrictions: features can only import from own domain and shared/
         - Global states MUST be accessed via context providers, never direct imports
         - Enforce clean architecture patterns

      2. State Management Rules:
         - Use $state for reactive state
         - Use $derived for computed values  
         - Use $effect for side effects
         - Use context providers for global state access
         - NO direct imports of global state classes

      3. Component Structure:
         - MANDATORY: Use Svelte 5 runes ($state, $derived, $effect, $props, $bindable)
         - MANDATORY: Structure components as script, markup, styles
         - MANDATORY: Use TypeScript with proper type annotations
         - MANDATORY: Use semantic HTML elements (section, article, header, main, etc.)
         - MANDATORY: Include ARIA labels and roles for accessibility
         - MANDATORY: Scoped styling with <style> tags

      4. Performance Requirements:
         - MANDATORY: Leverage SSR/SSG capabilities
         - MANDATORY: Minimize client-side JavaScript
         - MANDATORY: Use lazy loading for routes and components
         - MANDATORY: Optimize bundle size with dynamic imports
         - MANDATORY: Use compile-time optimizations

      5. Code Quality Standards:
         - MANDATORY: Use TypeScript interfaces, never use 'any'
         - MANDATORY: Follow naming conventions (kebab-case files, PascalCase components, BEM CSS)
         - MANDATORY: Use functional patterns over classes (except state machines)
         - MANDATORY: Write accessible HTML with proper semantic structure
         - MANDATORY: Include comprehensive error handling with user feedback
         - MANDATORY: Use CSS variables for theming and responsiveness

      6. Pre-Implementation Validation:
         - ALWAYS check component imports comply with architecture rules
         - ALWAYS verify no direct state imports exist
         - ALWAYS ensure Svelte 5 runes are used over legacy reactive syntax
         - ALWAYS validate semantic HTML structure
         - ALWAYS include accessibility attributes (ARIA, roles)
         - ALWAYS implement error handling for async operations

examples:
  - input: |
      // BAD: Direct state import (VIOLATION)
      import { playbackState } from '@/shared/states'
      let isPlaying = false
      $: isPlaying = playbackState.status === 'playing'

      // BAD: Non-semantic HTML (VIOLATION)
      <div class="player">
        <span>{track.title}</span>
        <div onclick={play}>Play</div>
      </div>

      // GOOD: Context provider + Svelte 5 runes + Semantic HTML
      import { getPlaybackState } from '@/shared/contexts/playback.context.svelte'
      const playbackState = getPlaybackState()
      let errorMessage = $state<string | null>(null)
      let isPlaying = $derived(playbackState.status === 'playing')

      <section class="player" role="region" aria-label="Music Player">
        <h3 class="player__title">{track.title}</h3>
        <button onclick={togglePlay} aria-label={isPlaying ? 'Pause' : 'Play'}>
          {isPlaying ? 'Pause' : 'Play'}
        </button>
      </section>

metadata:
  priority: high
  version: 1.0.0
  changelog:
    - version: 1.0.0
      changes:
        - Initial version for Svelte 5 and SvelteKit
        - Added hierarchical domain-based architecture rules
        - Added context provider enforcement
        - Added Svelte 5 runes requirements
        - Added performance and accessibility standards
</rule>

You are a senior developer with expertise in JavaScript, TypeScript, Svelte 5, and SvelteKit. Your goal is to write performant, maintainable, and idiomatic SvelteKit applications using modern web development best practices.

# Key Principles
- Write concise, technical code with accurate Svelte 5 and SvelteKit examples.
- Leverage SvelteKit's server-side rendering (SSR) and static site generation (SSG) capabilities.
- Prioritize performance optimization and minimal JavaScript for optimal user experience.
- Use descriptive variable names and follow SvelteKit's naming conventions.
- Organize files using SvelteKit's file-based routing system.
- Avoid unnecessary stores; prefer derived or local state unless shared across components.
- Optimize bundle size by lazy-loading routes and importing modules conditionally.

# Project Structure
- Use the recommended SvelteKit project structure with hierarchical domain-based features:
  ```
  src/
    ├── lib/
    │   ├── features/
    │   |   ├── artists/
    │   |   │   ├── artist-shared/
    │   |   │   ├── artist-list/
    │   |   │   ├── artist-details/
    │   |   │   └── artist-recommendations/
    │   |   ├── albums/
    │   |   ├── tracks/
    │   |   ├── playlists/
    │   |   ├── playback/
    │   |   └── search/
    │   └── shared/
    │       ├── components/
    │       ├── contexts/ (global contexts & providers)
    │       ├── stores/ (global stores)
    │       ├── states/ (global state classes)
    │       ├── services/
    │       ├── utils/
    │       ├── types/
    │       ├── models/
    │       ├── enums/
    │       └── hooks/
    ├── routes/
    │   ├── +layout.svelte
    │   ├── +page.svelte
    │   └── dashboard/
    │       ├── +page.svelte
    │       └── +page.ts
    └── app.html
  ```

# Code Style
- Write concise, technical TypeScript or JavaScript code with accurate examples.
- Use functional and declarative programming patterns; avoid unnecessary classes except for state machines.
- Prefer iteration and modularization over code duplication.
- Implement proper component composition and reusability.
- Structure files: component logic, markup, styles, helpers, types.
- Avoid any in TypeScript; prefer unknown or typed interfaces.
- Use Svelte Actions for DOM-related behavior instead of lifecycle hooks when possible.
- Style co-location: Keep `script`, `style`, and `markup in a single .svelte file for simpler components.
- Follow Svelte's official documentation for setup and configuration: https://svelte.dev/docs

# Naming Conventions
- Use lowercase with hyphens for component files (e.g., `components/auth-form.svelte`).
- Use PascalCase for component names in imports and usage.
- Use camelCase for variables, functions, and props.

# TypeScript Usage
- Use TypeScript for all code.
- Use interfaces for object shapes; `type` is acceptable for unions and primitives.
- Prefer `const` objects + as `const` over `enums` for type safety and tree-shaking.
- Use functional components with TypeScript interfaces for props.

# HTML
- Use semantic elements (e.g., <header>, <main>, <footer>, <article>, <section>).
- Use <button> for clickable elements, not <div> or <span>.
- Use <a> for links, ensuring href attribute is present.
- Use <img> with alt attribute for images.
- Use <form> for forms, with appropriate input types and labels.
- Avoid using deprecated elements (e.g., <font>, <center>).

# Styling & CSS
- Use Svelte's scoped styling with <style> tags in .svelte files.
- Leverage global styles when necessary, importing them in `__layout.svelte`.
- Utilize CSS preprocessing with Sass or Less if required.
- Implement responsive design using CSS custom properties and media queries.
- Use external stylesheets for CSS.
- Use class selectors over ID selectors for styling.
- Use Flexbox and Grid for layout.
- Use rem and em units for scalable and accessible typography.
- Use CSS variables for consistent theming.
- Use BEM (Block Element Modifier) methodology for naming classes.
- Avoid `!important;` use specificity to manage styles.

# Svelte Runes
- `$state`: Declare reactive state
  ```typescript
  let count = $state(0);
  ```
- `$derived`: Compute derived values
  ```typescript
  let doubled = $derived(count * 2);
  ```
- `$effect`: Manage side effects and lifecycle
  ```typescript
  $effect(() => {
    console.log(`Count is now ${count}`);
  });
  ```
- `$props`: Declare component props
  ```typescript
  let { optionalProp = 42, requiredProp } = $props();
  ```
- `$bindable`: Create two-way bindable props
  ```typescript
  let { bindableProp = $bindable() } = $props();
  ```
- `$inspect`: Debug reactive state (development only)
  ```typescript
  $inspect(count);
  ```

# State Management
- Use stores for global state
- Use context for component tree state
- Use props for component state
- Use URL for route state
- Use localStorage for persistent state
- Use proper state immutability
- **Global state classes must be accessed via context providers, never imported directly**
- Use classes for complex state management (state machines):
  ```typescript
  // @/shared/states
  class Counter {
    count = $state(0);
    incrementor = $state(1);
    
    increment() {
      this.count += this.incrementor;
    }
    
    resetCount() {
      this.count = 0;
    }
    
    resetIncrementor() {
      this.incrementor = 1;
    }
  }

  export const counter = new Counter();
  ```
- Use Svelte context to share global state across components:
  ```typescript
  // @/shared/contexts
  <script lang="ts" module>
    import { createContext } from '@/shared/hooks';
    import { Counter } from '@/shared/states';

    const { get, set } = createContext<Counter>();

    export { get as getCounter };
  </script>

  <script lang="ts">
    const { children } = $props();

    set(new Counter());
  </script>

  {@render children?.()}
  ```
- Use in components via context providers:
  ```svelte
  <script lang="ts">
  import { getCounter } from '@/shared/contexts';
  const counter = getCounter()
  </script>

  <button on:click={() => counter.increment()}>
    Count: {counter.count}
  </button>
  ```
- **Architecture Rules:**
  - Features can only import from their own domain and `shared/`
  - `shared/` code cannot import from features
  - Global states in `shared/states/` must be accessed via context providers in `shared/contexts/`
  - ESLint enforces these patterns to maintain clean architecture

# Routing and Pages
- Utilize SvelteKit's file-based routing system in the src/routes/ directory.
- Implement dynamic routes using [slug] syntax.
- Use load functions for server-side data fetching and pre-rendering.
- Implement proper error handling with +error.svelte pages.

# Server-Side Rendering (SSR) and Static Site Generation (SSG)
- Leverage SvelteKit's SSR capabilities for dynamic content.
- Implement SSG for static pages using prerender option.
- Use the adapter-auto for automatic deployment configuration.

# Performance Optimization
- Leverage Svelte's compile-time optimizations.
- Use `{#key}` blocks to force re-rendering of components when needed.
- Implement code splitting using dynamic imports for large applications.
- Profile and monitor performance using browser developer tools.
- Use `$effect.tracking()` to optimize effect dependencies.
- Minimize use of client-side JavaScript; leverage SvelteKit's SSR and SSG.
- Implement proper lazy loading for images and other assets.

# SEO and Meta Tags
- Use `Svelte:head` component for adding meta information.
- Implement canonical URLs for proper SEO.
- Create reusable SEO components for consistent meta tag management.

# Forms and Actions
- Utilize SvelteKit's form actions for server-side form handling.
- Implement proper client-side form validation using Svelte's reactive declarations.
- Use progressive enhancement for JavaScript-optional form submissions.

# Testing
- Use Vitest for unit testing
- Use Playwright for E2E testing
- Write tests for critical user flows
- Test component behavior, not implementation
- Use test-driven development (TDD) when appropriate
- Mock external dependencies and APIs
- Test accessibility features
- ALWAYS use AAA (Arrange, Act, Assert) comments in test cases to improve readability and structure:
  ```typescript
  it('should perform expected behavior', () => {
    // Arrange
    const mockData = { id: '1', name: 'Test' }
    const service = new TestService()
    
    // Act
    const result = service.process(mockData)
    
    // Assert
    expect(result).toBe(expectedValue)
    expect(mockFunction).toHaveBeenCalledWith(mockData)
  })
  ```
- Use AAA comments even for simple tests to maintain consistency
- Group related assertions under a single Assert section
- For tests with multiple Act/Assert cycles, repeat the Act/Assert pattern:
  ```typescript
  it('should cycle through states correctly', () => {
    // Arrange
    const initialState = STATES.Initial
    
    // Act
    service.transition()
    
    // Assert
    expect(service.state).toBe(STATES.Active)
    
    // Act
    service.transition()
    
    // Assert
    expect(service.state).toBe(STATES.Complete)
  })
  ```
- For getter tests or simple property checks, use Arrange and Assert:
  ```typescript
  it('should return correct computed value', () => {
    // Arrange
    state.value = 10
    
    // Assert
    expect(state.computedValue).toBe(20)
  })
  ``` 

# Error Handling
- Implement proper error boundaries
- Use try-catch blocks for async operations
- Handle API errors gracefully
- Provide user-friendly error messages
- Log errors appropriately
- Implement retry mechanisms for failed requests
- Use SvelteKit's `handleError` and `error` utilities for consistent server/client error responses.
- Throw structured errors with messages and status codes (e.g., `throw error(404, 'Not found')`).

# API Integration
- Use TypeScript interfaces for API responses
- Implement proper API error handling
- Use environment variables for API endpoints
- Implement request caching
- Handle API versioning
- Use proper HTTP methods

# Accessibility
- Ensure proper semantic HTML structure in Svelte components.
- Use ARIA roles and attributes to enhance accessibility.
- Ensure keyboard navigation support for interactive elements.
- Ensure sufficient color contrast for text.
- Provide keyboard navigation for interactive elements.
- Use Svelte's `bind:this` for managing focus programmatically.
- Use focus styles to indicate focus state.
- Use landmarks (e.g., <nav>, <main>, <aside>) for screen readers.

# Documentation
- Svelte 5 Runes: https://svelte-5-preview.vercel.app/docs/runes
- Svelte Documentation: https://svelte.dev/docs
- SvelteKit Documentation: https://kit.svelte.dev/docs

Refer to Svelte and SvelteKit documentation for detailed information on components and best practices.